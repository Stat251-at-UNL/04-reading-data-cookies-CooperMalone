---
title: "Chocolate Chip Cookies"
execute:
  error: true
author: "Cooper Malone"
output: html_document
---

## Reading In the Data

First, read in the CSV data of cookie ingredients.
Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file.

```{r}

library(dplyr)

df=read.csv("choc_chip_cookie_ingredients.csv")

df=df %>%
  mutate(Ingredient = as.character(Ingredient),
    Text = as.character(Text),
    Recipe_Index = as.character(Recipe_Index),
    Rating = as.numeric(Rating),
    Quantity = as.numeric(Quantity),
    Unit = as.character(Unit))

```

```{python}

import pandas as pd

df = pd.read_csv("choc_chip_cookie_ingredients.csv")

df["Ingredient"] = df["Ingredient"].astype(str)  
df["Text"] = df["Text"].astype(str)  
df["Recipe_Index"] = df["Recipe_Index"].astype(str)  
df["Rating"] = df["Rating"].astype(float) 
df["Quantity"] = df["Quantity"].astype(float)  
df["Unit"] = df["Unit"].astype(str)

```


## Exploratory Data Analysis

Exploratory data analysis is the process of getting familiar with your dataset. To get started, [this blog post](https://www.mrdbourke.com/a-gentle-introduction-to-exploratory-data-analysis/) provides a nice checklist to get you thinking:

> 1.  What question(s) are you trying to solve (or prove wrong)?
> 2.  What kind of data do you have and how do you treat different types?
> 3.  What's missing from the data and how do you deal with it?
> 4.  Where are the outliers and why should you care about them?
> 5.  How can you add, change or remove features to get more out of your data?

### Generating Questions

Generate at least 5 questions you might explore using this database of cookie ingredients.

1. What's the average rating of all the recipes? 
2. How do the three recipe sources differ, if at all?
3. What is the most common ingredient?
4. Is there a correlation between recipe rating and ingredient quantity?
5. How does the ingredients affect the quantity? 


### Skimming the Data

One thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?

The `skimr` package in R, and the similar `skimpy` package in python (which has a much better name, in my opinion), can help provide visual summaries of the data. 

Install both packages, and read the package documentation ([R](https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html), [Python](https://pypi.org/project/skimpy/)).

[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package's `skim` function.


```{r}

library(skimr)

skim_tee(df)

```

```{python}

from skimpy import skim

skim(df.select_dtypes(include=['object']))

```

[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?

Part 2: I discovered what the longest list of ingredients was by looking at the longest string column in skim. I also found the shortest list of ingredients in terms of characters that being 1 egg. 

### Generating Tables

Another useful technique for exploratory data analysis is to generate summary tables. 
You may want to use the `dplyr` package in R (`group_by` or `count` functions), as well as the `groupby` and `count` methods in Pandas. [Python example](https://sparkbyexamples.com/pandas/pandas-groupby-count-examples/), [R example](https://dplyr.tidyverse.org/reference/count.html)

[Part 1] Using R and Python, generate a table that shows what **proportion** of recipes contain each type of ingredient, for the most common 20 ingredients.

```{r}

library(dplyr)

top20=df %>%
  count(Ingredient, sort = TRUE) %>%
  top_n(20, n) %>%
  pull(Ingredient)

top20df=df %>%
  filter(Ingredient %in% top20)

recipes=top20df %>%
  group_by(Ingredient) %>%
  summarise(Recipe_Count = n_distinct(Recipe_Index))

total_recipes=n_distinct(df$Recipe_Index)

table=recipes %>%
  mutate(Proportion = Recipe_Count / total_recipes) %>%
  select(Ingredient, Proportion)

print(table)

```

Sidenote: This table shows the top 22 ingredients because some ingredients are tied for 20th, resulting in more than 20 ingredients being shown. 

```{python}

import pandas as pd

top20 = df['Ingredient'].value_counts().head(20).index

top20df = df[df['Ingredient'].isin(top20)]

recipes = top20df.groupby('Ingredient')['Recipe_Index'].nunique()

total_recipes = df['Recipe_Index'].nunique()

table = (recipes / total_recipes).reset_index()

table.columns = ['Ingredient', 'Proportion']

print(table)

```

[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.

```{python}

recipe_count = df.groupby('Ingredient')['Recipe_Index'].nunique()

ingredients20 = recipe_count[recipe_count < 20].index

ingredients = ', '.join(ingredients20)

print(ingredients)

```
### Visualization

Using whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you've come up with as you've worked on this assignment.

[Part 1] Create at least one plot (it doesn't have to be pretty) that showcases an interesting facet of the data.

```{python}

import matplotlib.pyplot as plt

common = df['Ingredient'].value_counts().head(5)

plt.bar(common.index, common.values)
plt.title('Common Ingredients')
plt.xlabel('Ingredient')
plt.ylabel('Frequency')
plt.xticks(rotation=15)
plt.show()

```

[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here.

Part 2: I can learn from the plot what the most common and least common ingredient is as well as some in the middle. I made the plot encompass the top 5 ingredients and what I can investigate here is maybe why these are the top 5 ingredients and what role they play on the other variables. 
